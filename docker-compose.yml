# ======================================
# Docker Compose - Development Environment
# YuToDo Server Containerization
# Usage: docker-compose up
# ======================================

services:
  # YuToDo Server
  yutodo-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: yutodo-server-dev
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "3001:3001"
    
    # Environment variables for development
    environment:
      - NODE_ENV=development
      - YUTODO_SERVER_HOST=0.0.0.0
      - YUTODO_SERVER_PORT=3001
      - YUTODO_DB_PATH=/data/todos.db
      # CONFIG_DIR removed to use default settings
      # - YUTODO_CONFIG_DIR=/config
      - YUTODO_LOG_LEVEL=debug
      - YUTODO_ENABLE_DEBUG=true
      # CORS configuration: allow wildcards in development
      - YUTODO_CORS_ORIGINS=*
      # Schedule configuration
      - YUTODO_SCHEDULE_INTERVAL=60
    
    # Volume mounts
    volumes:
      # Database persistence
      - yutodo-data:/data
      # Configuration file (optional) - removed to use default settings
      # - ./server/config:/config:ro
      # Log output (for development debugging)
      - yutodo-logs:/logs
    
    # Health check - improved health check configuration
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { host: 'localhost', port: 3001, timeout: 5000 }; const request = http.request(options, (res) => { console.log('Health check status:', res.statusCode); process.exit(res.statusCode === 200 ? 0 : 1); }); request.on('error', (err) => { console.log('Health check error:', err.message); process.exit(1); }); request.end();"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Networking
    networks:
      - yutodo-network
    
    # Labels for better management
    labels:
      - "com.yutodo.environment=development"
      - "com.yutodo.service=server"
      - "com.yutodo.version=1.0.0"

# Named volumes for data persistence
volumes:
  yutodo-data:
    driver: local
    labels:
      - "com.yutodo.description=YuToDo database storage"
  
  yutodo-logs:
    driver: local
    labels:
      - "com.yutodo.description=YuToDo server logs"

# Custom network for service communication
networks:
  yutodo-network:
    driver: bridge
    labels:
      - "com.yutodo.description=YuToDo internal network"