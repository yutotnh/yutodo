name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Static Application Security Testing (SAST)
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript', 'rust' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality

      - name: Setup Node.js
        if: matrix.language == 'javascript' || matrix.language == 'typescript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        if: matrix.language == 'javascript' || matrix.language == 'typescript'
        run: |
          npm ci
          cd server && npm ci

      - name: Setup Rust
        if: matrix.language == 'rust'
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        if: matrix.language == 'rust'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install system dependencies for Tauri
        if: matrix.language == 'rust'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build Rust project
        if: matrix.language == 'rust'
        run: |
          cd src-tauri
          cargo build --release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit for Rust vulnerability scanning
        run: cargo install cargo-audit --locked

      # Frontend dependency scan
      - name: Frontend dependency audit
        run: |
          echo "üîç Scanning frontend dependencies..."
          npm audit --audit-level=moderate --json > frontend-audit.json || true
          
          # Check if there are any vulnerabilities
          if [ -s frontend-audit.json ] && [ "$(cat frontend-audit.json | jq '.vulnerabilities | length')" -gt 0 ]; then
            echo "‚ö†Ô∏è Frontend vulnerabilities found:"
            npm audit --audit-level=moderate
            echo "frontend_vulnerabilities=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No frontend vulnerabilities found"
            echo "frontend_vulnerabilities=false" >> $GITHUB_ENV
          fi

      # Backend dependency scan
      - name: Backend dependency audit
        run: |
          echo "üîç Scanning backend dependencies..."
          cd server
          npm audit --audit-level=moderate --json > ../backend-audit.json || true
          
          # Check if there are any vulnerabilities
          if [ -s ../backend-audit.json ] && [ "$(cat ../backend-audit.json | jq '.vulnerabilities | length')" -gt 0 ]; then
            echo "‚ö†Ô∏è Backend vulnerabilities found:"
            npm audit --audit-level=moderate
            echo "backend_vulnerabilities=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No backend vulnerabilities found"
            echo "backend_vulnerabilities=false" >> $GITHUB_ENV
          fi

      # Rust dependency scan
      - name: Rust dependency audit
        run: |
          echo "üîç Scanning Rust dependencies..."
          cd src-tauri
          cargo audit --json > ../rust-audit.json || true
          
          # Check if there are any vulnerabilities
          if [ -s ../rust-audit.json ] && [ "$(cat ../rust-audit.json | jq '.vulnerabilities | length')" -gt 0 ]; then
            echo "‚ö†Ô∏è Rust vulnerabilities found:"
            cargo audit
            echo "rust_vulnerabilities=true" >> $GITHUB_ENV
          else
            echo "‚úÖ No Rust vulnerabilities found"
            echo "rust_vulnerabilities=false" >> $GITHUB_ENV
          fi

      # Upload audit results
      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-results
          path: |
            frontend-audit.json
            backend-audit.json
            rust-audit.json
          retention-days: 30

      # Create security summary
      - name: Create security summary
        if: always()
        run: |
          echo "## üîí Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Frontend results
          echo "### Frontend Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ "$frontend_vulnerabilities" = "true" ]; then
            echo "‚ùå Vulnerabilities detected in frontend dependencies" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No vulnerabilities found in frontend dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Backend results
          echo "### Backend Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ "$backend_vulnerabilities" = "true" ]; then
            echo "‚ùå Vulnerabilities detected in backend dependencies" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No vulnerabilities found in backend dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Rust results
          echo "### Rust Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ "$rust_vulnerabilities" = "true" ]; then
            echo "‚ùå Vulnerabilities detected in Rust dependencies" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No vulnerabilities found in Rust dependencies" >> $GITHUB_STEP_SUMMARY
          fi

  # Container Image Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        run: |
          cd server
          docker build -t yutodo-server:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yutodo-server:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yutodo-server:security-scan'
          format: 'json'
          output: 'trivy-results.json'

      - name: Process Trivy results
        if: always()
        run: |
          echo "üîç Container image security scan completed"
          
          # Check for HIGH and CRITICAL vulnerabilities
          high_critical=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length')
          medium=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length')
          low=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length')
          
          echo "High/Critical vulnerabilities: $high_critical"
          echo "Medium vulnerabilities: $medium"
          echo "Low vulnerabilities: $low"
          
          # Create summary
          echo "## üê≥ Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **High/Critical**: $high_critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **Medium**: $medium vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- **Low**: $low vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
          # Fail if there are HIGH or CRITICAL vulnerabilities
          if [ "$high_critical" -gt 0 ]; then
            echo "‚ùå HIGH or CRITICAL vulnerabilities found in container image"
            exit 1
          else
            echo "‚úÖ No HIGH or CRITICAL vulnerabilities found"
          fi

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

  # Secret Detection
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch full history for better secret detection
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

      - name: Run GitSecrets
        run: |
          # Install git-secrets
          git clone https://github.com/awslabs/git-secrets.git
          cd git-secrets
          make install
          cd ..
          
          # Configure git-secrets
          git secrets --register-aws
          git secrets --install
          
          # Scan for secrets
          echo "üîç Scanning for secrets with git-secrets..."
          git secrets --scan || {
            echo "‚ùå Secrets detected in repository"
            echo "secrets_found=true" >> $GITHUB_ENV
            exit 1
          }
          
          echo "‚úÖ No secrets detected"
          echo "secrets_found=false" >> $GITHUB_ENV

      - name: Security summary
        if: always()
        run: |
          echo "## üîê Secret Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$secrets_found" = "true" ]; then
            echo "‚ùå Secrets detected in repository" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required**: Review and remove any exposed secrets" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No secrets detected in repository" >> $GITHUB_STEP_SUMMARY
          fi

  # ESLint Security Rules
  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Install security plugins
        run: |
          npm install --no-save eslint-plugin-security eslint-plugin-no-secrets
          cd server
          npm install --no-save eslint-plugin-security eslint-plugin-no-secrets

      - name: Run ESLint security analysis (Frontend)
        run: |
          echo "üîç Running ESLint security analysis on frontend..."
          npx eslint . --ext .ts,.tsx,.js,.jsx \
            --config .eslintrc.json \
            --format json \
            --output-file eslint-frontend-security.json || true
          
          # Count security issues
          security_issues=$(cat eslint-frontend-security.json | jq '[.[] | .messages[] | select(.ruleId | startswith("security/"))] | length')
          echo "Frontend security issues: $security_issues"
          echo "frontend_security_issues=$security_issues" >> $GITHUB_ENV

      - name: Run ESLint security analysis (Backend)
        run: |
          echo "üîç Running ESLint security analysis on backend..."
          cd server
          npx eslint . --ext .ts,.js \
            --format json \
            --output-file ../eslint-backend-security.json || true
          
          # Count security issues
          security_issues=$(cat ../eslint-backend-security.json | jq '[.[] | .messages[] | select(.ruleId | startswith("security/"))] | length')
          echo "Backend security issues: $security_issues"
          echo "backend_security_issues=$security_issues" >> $GITHUB_ENV

      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-results
          path: |
            eslint-frontend-security.json
            eslint-backend-security.json
          retention-days: 30

      - name: Create ESLint security summary
        if: always()
        run: |
          echo "## üõ°Ô∏è ESLint Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Security Issues**: $frontend_security_issues" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Security Issues**: $backend_security_issues" >> $GITHUB_STEP_SUMMARY
          
          total_issues=$((frontend_security_issues + backend_security_issues))
          if [ "$total_issues" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Action Required**: Review and fix security issues identified by ESLint" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ No security issues detected by ESLint" >> $GITHUB_STEP_SUMMARY
          fi

  # Security Report Consolidation
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql-analysis, dependency-scan, container-scan, secret-scan, eslint-security]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts

      - name: Generate consolidated security report
        run: |
          echo "# üîí YuToDo Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "Generated on: $(date -u)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "" >> security-report.md
          echo "| Scan Type | Status | Details |" >> security-report.md
          echo "|-----------|--------|---------|" >> security-report.md
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} | Static code analysis |" >> security-report.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | npm audit + cargo audit |" >> security-report.md
          echo "| Container Scan | ${{ needs.container-scan.result }} | Trivy image scan |" >> security-report.md
          echo "| Secret Detection | ${{ needs.secret-scan.result }} | TruffleHog + git-secrets |" >> security-report.md
          echo "| ESLint Security | ${{ needs.eslint-security.result }} | Security-focused linting |" >> security-report.md
          echo "" >> security-report.md
          
          # Overall status
          if [[ "${{ needs.codeql-analysis.result }}" == "success" && \
                "${{ needs.dependency-scan.result }}" == "success" && \
                "${{ needs.container-scan.result }}" == "success" && \
                "${{ needs.secret-scan.result }}" == "success" && \
                "${{ needs.eslint-security.result }}" == "success" ]]; then
            echo "## ‚úÖ Overall Status: PASSED" >> security-report.md
            echo "All security scans completed successfully with no critical issues." >> security-report.md
          else
            echo "## ‚ùå Overall Status: ATTENTION REQUIRED" >> security-report.md
            echo "One or more security scans detected issues that require attention." >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "## Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. **Regular Updates**: Keep dependencies updated to latest secure versions" >> security-report.md
          echo "2. **Secret Management**: Use environment variables and secret management systems" >> security-report.md
          echo "3. **Container Security**: Regularly update base images and scan for vulnerabilities" >> security-report.md
          echo "4. **Code Review**: Implement security-focused code review practices" >> security-report.md
          echo "5. **Monitoring**: Enable security monitoring and alerting in production" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

      - name: Post security summary
        run: |
          echo "# üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat security-report.md >> $GITHUB_STEP_SUMMARY