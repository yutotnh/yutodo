# Release Please workflow - automated release management
name: Release Please

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      prerelease: ${{ steps.release.outputs.prerelease }}
      body: ${{ steps.release.outputs.body }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node

  build-and-release:
    if: ${{ needs.release-please.outputs.release_created }}
    needs: release-please
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Run tests
        run: |
          npm test -- --run
          cd server
          npm test

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.release-please.outputs.tag_name }}
          releaseName: 'YuToDo ${{ needs.release-please.outputs.tag_name }}'
          releaseBody: ${{ needs.release-please.outputs.body }}
          releaseDraft: false
          prerelease: ${{ needs.release-please.outputs.prerelease == 'true' }}

  publish-docker:
    name: Publish Docker Image
    if: ${{ needs.release-please.outputs.release_created }}
    needs: release-please
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/server
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.tag_name }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.tag_name }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.release-please.outputs.tag_name }}
            GITHUB_REPOSITORY=${{ github.repository }}

      - name: Update release with Docker info
        run: |
          # Add Docker image information to the release
          DOCKER_INFO="## Docker Image\n\nThe YuToDo Server is available as a Docker image from GitHub Container Registry:\n\n\`\`\`bash\ndocker pull ghcr.io/${{ github.repository }}/server:${{ needs.release-please.outputs.tag_name }}\n\`\`\`\n\nSee the [Docker documentation](https://github.com/${{ github.repository }}#docker-containerization) for usage instructions."
          
          gh release edit ${{ needs.release-please.outputs.tag_name }} \
            --notes-file - << EOF
          $(gh release view ${{ needs.release-please.outputs.tag_name }} --json body --jq .body)
          
          ${DOCKER_INFO}
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}