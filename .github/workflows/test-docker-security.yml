name: Test Docker Security Fixes

# Manual trigger for testing security fixes
on:
  workflow_dispatch:
  push:
    paths:
      - 'server/Dockerfile'
      - 'server/.trivyignore'
      - '.github/workflows/test-docker-security.yml'

jobs:
  docker-security-test:
    name: Test Docker Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd server
          docker build -t yutodo-server:security-test .
          
      - name: Show Docker image details
        run: |
          echo "🐳 Docker Image Details:"
          docker images yutodo-server:security-test
          echo ""
          echo "📦 Base image layers:"
          docker history yutodo-server:security-test | head -10

      - name: Run Trivy vulnerability scanner (Table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yutodo-server:security-test'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'  # Don't fail, just report

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'yutodo-server:security-test'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'HIGH,CRITICAL'

      - name: Analyze Trivy results
        run: |
          echo "📊 Vulnerability Analysis:"
          echo "========================="
          
          # Check if jq is available
          if ! command -v jq &> /dev/null; then
              echo "Installing jq..."
              sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Count vulnerabilities by severity
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json)
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json)
          
          echo "🔴 CRITICAL vulnerabilities: $CRITICAL_COUNT"
          echo "🟠 HIGH vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo ""
              echo "⚠️ Vulnerabilities detected!"
              echo ""
              echo "Affected packages:"
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.Severity): \(.PkgName) \(.InstalledVersion) -> \(.FixedVersion // "no fix available")"' trivy-results.json | sort -u
              
              echo ""
              echo "CVE Details:"
              jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "- \(.VulnerabilityID): \(.Title // .Description // "No description")"' trivy-results.json | sort -u | head -20
          else
              echo ""
              echo "✅ No HIGH or CRITICAL vulnerabilities found!"
          fi

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json
          retention-days: 7

      - name: Create summary
        if: always()
        run: |
          echo "## 🔒 Docker Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f trivy-results.json ]; then
              HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json)
              CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json)
              
              if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
                  echo "❌ **Security Issues Found**" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **CRITICAL**: $CRITICAL_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
                  echo "- **HIGH**: $HIGH_COUNT vulnerabilities" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Top Affected Packages:" >> $GITHUB_STEP_SUMMARY
                  jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "- \(.PkgName) \(.InstalledVersion)"' trivy-results.json | sort -u | head -10 >> $GITHUB_STEP_SUMMARY
              else
                  echo "✅ **No HIGH or CRITICAL vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
              fi
          else
              echo "⚠️ Unable to analyze scan results" >> $GITHUB_STEP_SUMMARY
          fi