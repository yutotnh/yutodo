name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Check TypeScript (Frontend)
        run: npm run build

      - name: Check TypeScript (Backend)
        run: |
          cd server
          npm run build

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test -- --run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run backend tests
        run: |
          cd server
          npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-tauri:
    name: Tauri Build Test
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --debug

  test-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ['linux/amd64', 'linux/arm64']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Test multi-platform Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}
            VERSION=ci-test
            GITHUB_REPOSITORY=${{ github.repository }}

      - name: Test Docker Compose (Development)
        if: matrix.platform == 'linux/amd64'
        run: |
          docker compose config
          docker compose build

      - name: Test Docker Compose (Production)
        if: matrix.platform == 'linux/amd64'
        run: |
          docker compose -f docker-compose.prod.yml config
          docker compose -f docker-compose.prod.yml build

      - name: Test container startup (amd64 only)
        if: matrix.platform == 'linux/amd64'
        run: |
          echo "=== Installing required tools ==="
          sudo apt-get update -qq && sudo apt-get install -y curl netcat-openbsd
          
          echo "=== Starting development container ==="
          docker compose up -d
          
          echo "=== Waiting for container to be ready ==="
          # Give the container some time to initialize
          sleep 5
          
          # Check container status
          echo "Container status:"
          docker compose ps
          
          # Show initial logs
          echo "=== Initial container logs ==="
          docker compose logs yutodo-server
          
          # Enhanced health check with better timeout and error handling
          echo "=== Testing server connectivity ==="
          for i in {1..60}; do
            echo "Health check attempt $i/60..."
            
            # Step 1: Check TCP port connectivity with netcat
            if nc -z localhost 3001 2>/dev/null; then
              echo "‚úÖ TCP port 3001 is accessible"
              
              # Step 2: Test HTTP response with curl  
              if curl -f -s --connect-timeout 2 --max-time 5 http://localhost:3001 >/dev/null 2>&1; then
                echo "‚úÖ Server is responding with HTTP!"
                break
              else
                echo "üî∂ Port accessible but HTTP request failed, retrying..."
              fi
            else
              echo "üî∂ TCP port 3001 not yet accessible"
            fi
            
            # Step 3: If external checks fail, try internal connectivity test
            if docker compose exec -T yutodo-server node -e "
              const http = require('http');
              const options = { host: '0.0.0.0', port: 3001, timeout: 3000 };
              const request = http.request(options, (res) => {
                console.log('Internal health check - Status:', res.statusCode);
                process.exit(res.statusCode === 200 ? 0 : 1);
              });
              request.on('error', (err) => {
                console.log('Internal health check error:', err.message);
                process.exit(1);
              });
              request.end();
            " 2>/dev/null; then
              echo "‚úÖ Server internal connectivity confirmed!"
              break
            fi
            
            if [ $i -eq 60 ]; then
              echo "‚ùå Server failed to become ready within 60 seconds"
              echo "=== Final container logs ==="
              docker compose logs yutodo-server
              echo "=== Container processes ==="
              docker compose exec -T yutodo-server ps aux || true
              echo "=== Container network info ==="
              docker compose exec -T yutodo-server netstat -tlnp || true
              exit 1
            fi
            
            sleep 1
          done
          
          echo "=== Final status check ==="
          docker compose logs yutodo-server
          
          # Clean up
          echo "=== Cleaning up ==="
          docker compose down

  test-devcontainer:
    name: DevContainer Quick Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dev Container CLI
        run: |
          npm install -g @devcontainers/cli

      - name: Validate DevContainer configuration
        run: |
          # Quick validation of devcontainer.json syntax
          devcontainer read-configuration --workspace-folder .
          
          # Verify the referenced docker-compose files exist
          echo "Current working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          # Check if docker-compose files exist
          if [ -f "./docker-compose.yml" ] && [ -f "./.devcontainer/docker-compose.devcontainer.yml" ]; then
            echo "‚úÖ Both docker-compose files exist"
            
            # Test docker-compose syntax separately (without devcontainer context)
            echo "Testing docker-compose.yml syntax..."
            docker compose -f docker-compose.yml config > /dev/null
            
            echo "Testing docker-compose.devcontainer.yml syntax..."
            docker compose -f .devcontainer/docker-compose.devcontainer.yml config > /dev/null
            
            echo "‚úÖ DevContainer configuration is valid"
          else
            echo "‚ùå Required docker-compose files not found"
            exit 1
          fi