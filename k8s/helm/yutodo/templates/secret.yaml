apiVersion: v1
kind: Secret
metadata:
  name: {{ include "yutodo.secretName" . }}
  namespace: {{ include "yutodo.namespace" . }}
  labels:
    {{- include "yutodo.labels" . | nindent 4 }}
type: Opaque
data:
  # Session and Security Secrets
  SESSION_SECRET: {{ include "yutodo.sessionSecret" . }}
  JWT_SECRET: {{ include "yutodo.generateSecret" . }}
  ENCRYPTION_KEY: {{ include "yutodo.generateSecret" . }}
  
  {{- if eq .Values.config.database.type "postgresql" }}
  # PostgreSQL Secrets
  {{- if .Values.postgresql.enabled }}
  POSTGRES_PASSWORD: {{ .Values.postgresql.auth.password | default (randAlphaNum 32) | b64enc }}
  {{- else }}
  POSTGRES_PASSWORD: {{ .Values.config.database.postgresql.password | required "PostgreSQL password is required when using external PostgreSQL" | b64enc }}
  {{- end }}
  {{- end }}
  
  {{- if .Values.config.redis.enabled }}
  # Redis Secrets
  {{- if .Values.redis.enabled }}
  REDIS_PASSWORD: {{ .Values.redis.auth.password | default (randAlphaNum 32) | b64enc }}
  {{- else }}
  REDIS_PASSWORD: {{ .Values.config.redis.password | required "Redis password is required when using external Redis" | b64enc }}
  {{- end }}
  {{- end }}
  
  # Webhook Secrets
  WEBHOOK_SECRET: {{ include "yutodo.generateSecret" . }}
  
  # API Keys (if configured)
  {{- if .Values.config.external.openaiApiKey }}
  OPENAI_API_KEY: {{ .Values.config.external.openaiApiKey | b64enc }}
  {{- end }}
  {{- if .Values.config.external.githubApiKey }}
  GITHUB_API_KEY: {{ .Values.config.external.githubApiKey | b64enc }}
  {{- end }}
  
  # Backup Secrets (if S3 backup is enabled)
  {{- if and .Values.backup.enabled (eq .Values.backup.storage.type "s3") }}
  {{- if .Values.backup.storage.s3.accessKeyId }}
  AWS_ACCESS_KEY_ID: {{ .Values.backup.storage.s3.accessKeyId | b64enc }}
  {{- end }}
  {{- if .Values.backup.storage.s3.secretAccessKey }}
  AWS_SECRET_ACCESS_KEY: {{ .Values.backup.storage.s3.secretAccessKey | b64enc }}
  {{- end }}
  {{- end }}
  
  # Notification Secrets
  {{- if and .Values.backup.notifications.slack.enabled .Values.backup.notifications.slack.webhook }}
  SLACK_WEBHOOK_URL: {{ .Values.backup.notifications.slack.webhook | b64enc }}
  {{- end }}
  {{- if and .Values.backup.notifications.email.enabled .Values.backup.notifications.email.smtp.password }}
  SMTP_PASSWORD: {{ .Values.backup.notifications.email.smtp.password | b64enc }}
  {{- end }}
  
  # Monitoring Secrets
  {{- if .Values.monitoring.prometheus.auth.enabled }}
  PROMETHEUS_USERNAME: {{ .Values.monitoring.prometheus.auth.username | b64enc }}
  PROMETHEUS_PASSWORD: {{ .Values.monitoring.prometheus.auth.password | b64enc }}
  {{- end }}
  {{- if .Values.monitoring.grafana.auth.enabled }}
  GRAFANA_API_KEY: {{ .Values.monitoring.grafana.auth.apiKey | b64enc }}
  {{- end }}
  
  # Certificate Secrets (if TLS is manually configured)
  {{- if .Values.config.tls.enabled }}
  {{- if .Values.config.tls.cert }}
  TLS_CERT: {{ .Values.config.tls.cert | b64enc }}
  {{- end }}
  {{- if .Values.config.tls.key }}
  TLS_KEY: {{ .Values.config.tls.key | b64enc }}
  {{- end }}
  {{- if .Values.config.tls.ca }}
  TLS_CA: {{ .Values.config.tls.ca | b64enc }}
  {{- end }}
  {{- end }}